# Usage Notes
# Add the following environment variables to your CircleCI project:

## AWS
# (see https://circleci.com/orbs/registry/orb/circleci/aws-cli)
# - AWS_REGION

## AWS ECR (Platform)
# (see https://circleci.com/orbs/registry/orb/circleci/aws-ecr)
# Note: These are provided by the platform-aws-ecr context
# - AWS_ECR_ACCESS_KEY_ID
# - AWS_ECR_SECRET_ACCESS_KEY
# - AWS_ECR_ACCOUNT_URL

version: 2.1
workflows:
  pull-request:
    unless:
      equal: ["trunk", << pipeline.git.branch >>]
    jobs:
      - build_and_test
      - build_image:
          requires:
            - build_and_test
      - deploy:
          requires:
            - build_image

  production:
    when:
      equal: ["trunk", << pipeline.git.branch >>]
    jobs:
      - build_and_test
      - build_image:
          requires:
            - build_and_test
      - deploy:
          requires:
            - build_image

orbs:
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-ecs: circleci/aws-ecs@2.0.0

parameters:
  docker-repo:
    type: string
    default: book-a-desk

  docker-img-version:
    type: string
    default: "build-<< pipeline.number >>"

  docker-tar-filename:
    type: string
    default: "book-a-desk_latest.tar"

commands:
  publish-test-results:
    description: Converts and publishes test results (.NET only)
    parameters:
      path:
        description: Path to the test results folder
        type: string
    steps:
      - run:
          name: Convert test results to CircleCI format
          command: |
            dotnet tool install --global trx2junit
            export PATH="$PATH:$HOME/.dotnet/tools"
            trx2junit << parameters.path >>/*.trx
      - store_test_results:
          path: << parameters.path >>
jobs:
  build_and_test:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0-alpine
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD

    steps:
      - checkout
      - run:
          name: Build
          command: dotnet build
      - run:
          name: Run unit tests
          command: |
            dotnet test \
            --verbosity normal \
            --filter "FullyQualifiedName~Tests" \
            --results-directory ./tests/unit/results \
            --logger "trx"
      - publish-test-results:
          path: ./tests/unit/results

  build_image:
    docker:
      - image: circleci/buildpack-deps:latest
        user: root
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t << pipeline.parameters.docker-repo >>:<< pipeline.parameters.docker-img-version >> \
              --build-arg AWSREGION=$AWS_REGION .
      - run:
          name: Save Docker image
          command: |
            docker save \
              -o << pipeline.parameters.docker-tar-filename >> \
              << pipeline.parameters.docker-repo >>:<< pipeline.parameters.docker-img-version >>
      - persist_to_workspace:
          root: .
          paths:
            - << pipeline.parameters.docker-tar-filename >>

  deploy:
    machine: true

    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Load Docker image
          command: docker load -i ./<< pipeline.parameters.docker-tar-filename >>
      - run:
          name: Tag Docker image for ECR
          command: |
            docker tag \
              << pipeline.parameters.docker-repo >>:<< pipeline.parameters.docker-img-version >> \
              "${AWS_ECR_ACCOUNT_URL}/<< pipeline.parameters.docker-repo >>:<< pipeline.parameters.docker-img-version >>"
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ECR_ACCESS_KEY_ID
          aws-secret-access-key: AWS_ECR_SECRET_ACCESS_KEY
          region: AWS_REGION
      - aws-ecr/push-image:
          repo: << pipeline.parameters.docker-repo >>
          tag: << pipeline.parameters.docker-img-version >>
      - aws-ecs/update-service:
          cluster-name: 'Book-A-Desk-Cluster'
          container-image-name-updates: 'container=Book-A-Desk-Container,tag=<< pipeline.parameters.docker-img-version >>'
          service-name: 'Book-A-Desk'
          family: 'Book-A-Desk-Backend'
          container-env-var-updates: container=Book-A-Desk-Container,name=AWS_KEYID,value=$AWSKEYID,container=Book-A-Desk-Container,value=AWS_SECRETKEY,value=$AWSSECRETKEY,container=Book-A-Desk-Container,value=ENVIRONMENT,value=$ENVIRONMENT