# Usage Notes
# Add the following environment variables to your CircleCI project:

## AWS
# (see https://circleci.com/orbs/registry/orb/circleci/aws-cli)
# - AWS_REGION

## AWS Credentials (Platform)
# Note: These are provided by the aws-credentials context
# - AWS_ACCESS_KEY_ID_BACKEND
# - AWS_ACCESS_KEY_ID_SECRET
# - AWS_SECRET_ACCESS_KEY_BACKEND
# - AWS_SECRET_ACCESS_KEY_SECRET
# - AWS_ACCOUNT
# - AWS_REGION

version: 2.1
workflows:
  pull-request:
    unless:
      equal: ["trunk", << pipeline.git.branch >>]
    jobs:
      - build_and_test
      - build_image:
          requires:
            - build_and_test

  production:
    when:
      equal: ["trunk", << pipeline.git.branch >>]
    jobs:
      - build_and_test
      - build_image:
          requires:
            - build_and_test
      - push-image:
          name: push-image-to-dev
          ecr-account-url: ${AWS_ECR_ACCOUNT_URL_DEV}
          aws-account-id: ${AWS_ACCOUNT_DEV}
          authenticate-aws:
            - authenticate-aws-book-a-desk-dev
          context:
            - aws-credentials
          requires:
            - build_image
      - deploy:
          name: deploy-to-dev
          ecr-account-url: ${AWS_ECR_ACCOUNT_URL_DEV}
          aws-account-id: ${AWS_ACCOUNT_DEV}
          authenticate-aws:
            - authenticate-aws-book-a-desk-dev
          certificate-id: ${ACM_CERTIFICATE_ID_DEV}
          hosted-zone-name: ${HOSTED_ZONE_NAME_DEV}
          network-stack-name: << pipeline.parameters.network-stack-name >>
          service-stack-name: << pipeline.parameters.backend-service-stack-name >>
          cloudformation-role: << pipeline.parameters.cloudformation-role-dev >>
          context:
            - aws-credentials
          requires:
            - push-image-to-dev
      - push-image:
          name: push-image-to-test
          ecr-account-url: ${AWS_ECR_ACCOUNT_URL_TEST}
          aws-account-id: ${AWS_ACCOUNT_TEST}
          authenticate-aws:
            - authenticate-aws-book-a-desk-test
          context:
            - aws-credentials
          requires:
            - deploy-to-dev
      - deploy:
          name: deploy-to-test
          ecr-account-url: ${AWS_ECR_ACCOUNT_URL_TEST}
          aws-account-id: ${AWS_ACCOUNT_TEST}
          authenticate-aws:
            - authenticate-aws-book-a-desk-test
          certificate-id: ${ACM_CERTIFICATE_ID_TEST}
          hosted-zone-name: ${HOSTED_ZONE_NAME_TEST}
          network-stack-name: << pipeline.parameters.network-stack-name >>
          service-stack-name: << pipeline.parameters.backend-service-stack-name >>
          cloudformation-role: << pipeline.parameters.cloudformation-role-test >>
          context:
            - aws-credentials
          requires:
            - push-image-to-test
      - production-gate:
          type:
            approval
          requires:
            - deploy-to-test
      - push-image:
          name: push-image-to-prod
          ecr-account-url: ${AWS_ECR_ACCOUNT_URL_PROD}
          aws-account-id: ${AWS_ACCOUNT_PROD}
          authenticate-aws:
            - authenticate-aws-book-a-desk-prod
          context:
            - aws-credentials
          requires:
            - production-gate
      - deploy:
          name: deploy-to-prod
          ecr-account-url: ${AWS_ECR_ACCOUNT_URL_PROD}
          aws-account-id: ${AWS_ACCOUNT_PROD}
          authenticate-aws:
            - authenticate-aws-book-a-desk-prod
          certificate-id: ${ACM_CERTIFICATE_ID_PROD}
          hosted-zone-name: ${HOSTED_ZONE_NAME_PROD}
          network-stack-name: << pipeline.parameters.network-stack-name >>
          service-stack-name: << pipeline.parameters.backend-service-stack-name >>
          cloudformation-role: << pipeline.parameters.cloudformation-role-prod >>
          context:
            - aws-credentials
          requires:
            - push-image-to-prod

orbs:
  aws-ecs: circleci/aws-ecs@2.0.0
  aws-cli: circleci/aws-cli@1.3.0

parameters:
  docker-repo:
    type: string
    default: book-a-desk
  docker-img-version:
    type: string
    default: "build-<< pipeline.number >>"
  docker-tar-filename:
    type: string
    default: "book-a-desk_latest.tar"
  cloudformation-role-dev:
    type: string
    default: arn:aws:iam::${AWS_ACCOUNT_DEV}:role/cloudformationstackbackenddev
  cloudformation-role-test:
    type: string
    default: arn:aws:iam::${AWS_ACCOUNT_TEST}:role/cloudformationstackbackendtest
  cloudformation-role-prod:
    type: string
    default: arn:aws:iam::${AWS_ACCOUNT_PROD}:role/cloudformationstackbackendprod
  network-stack-name:
    type: string
    default: book-a-desk-network
  backend-service-stack-name:
    type: string
    default: book-a-desk-backend-service

commands:
  publish-test-results:
    description: Converts and publishes test results (.NET only)
    parameters:
      path:
        description: Path to the test results folder
        type: string
    steps:
      - run:
          name: Convert test results to CircleCI format
          command: |
            dotnet tool install --global trx2junit
            export PATH="$PATH:$HOME/.dotnet/tools"
            trx2junit << parameters.path >>/*.trx
      - store_test_results:
          path: << parameters.path >>

  push-to-ecr:
    parameters:
      ecr-account-url:
        type: string
      aws-account-id:
        type: string
    steps:
      - run:
          name: Load Docker image
          command: docker load -i ./<< pipeline.parameters.docker-tar-filename >>
      - run:
          name: Tag Docker image for ECR
          command: |
            docker tag \
              << pipeline.parameters.docker-repo >>:<< pipeline.parameters.docker-img-version >> \
              "<< parameters.ecr-account-url >>/<< pipeline.parameters.docker-repo >>:<< pipeline.parameters.docker-img-version >>"
      - run:
          name: Docker login
          command: aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin << parameters.aws-account-id >>.dkr.ecr.${AWS_REGION}.amazonaws.com
      - run:
          name: Push Docker image
          command: |
            docker push "<< parameters.ecr-account-url >>/<< pipeline.parameters.docker-repo >>:<< pipeline.parameters.docker-img-version >>"

  log-aws-identity:
    parameters:
      profile:
        type: string
        default: ""
    steps:
      - run:
          name: Log AWS identity <<# parameters.profile >>(profile=<< parameters.profile >>)<</ parameters.profile >>
          command: aws sts get-caller-identity <<# parameters.profile >> --profile << parameters.profile >> <</ parameters.profile >> --region $AWS_REGION || true

  authenticate-aws-book-a-desk-dev:
    description: "Configure AWS credentials for Book A Desk Dev"
    steps:
      - run:
          name: "Initialize BASH_ENV variables"
          command: |
            echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_BACKEND_DEV}" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_BACKEND_DEV}" >> $BASH_ENV
            echo $AWS_SECRET_ACCESS_KEY_ID

  authenticate-aws-book-a-desk-test:
    description: "Configure AWS credentials for Book A Desk Test"
    steps:
      - run:
          name: "Initialize BASH_ENV variables"
          command: |
            echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_BACKEND_TEST}" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_BACKEND_TEST}" >> $BASH_ENV

  authenticate-aws-book-a-desk-prod:
    description: "Configure AWS credentials for Book A Desk Prod"
    steps:
      - run:
          name: "Initialize BASH_ENV variables"
          command: |
            echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_BACKEND_PROD}" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_BACKEND_PROD}" >> $BASH_ENV

  aws-cloudformation-deploy:
    parameters:
      certificate-id:
        type: string
      hosted-zone-name:
        type: string
      ecr-account-url:
        type: string
      network-stack-name:
        type: string
      service-stack-name:
        type: string
      cloudformation-role:
        type: string
    steps:
      - run:
          name: Ensure infrastructure is up to date
          command: |
            aws cloudformation deploy \
              --stack-name << parameters.network-stack-name >> \
              --template-file ./infra/network.yaml \
              --role-arn << parameters.cloudformation-role >>
            aws cloudformation deploy \
              --parameter-overrides "CertificateID=<< parameters.certificate-id >>" "HostedZoneName=<< parameters.hosted-zone-name >>" "Image=<< parameters.ecr-account-url >>/<< pipeline.parameters.docker-repo >>:<< pipeline.parameters.docker-img-version >>" "NetworkStackParameter=<< parameters.network-stack-name >>" \
              --stack-name << parameters.service-stack-name >> \
              --template-file ./infra/cf.yaml \
              --capabilities CAPABILITY_NAMED_IAM \
              --role-arn << parameters.cloudformation-role >>

jobs:
  build_and_test:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0-alpine
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD
    resource_class: small
    steps:
      - checkout
      - run:
          name: Build
          command: dotnet build
      - run:
          name: Run unit tests
          command: |
            dotnet test \
            --verbosity normal \
            --filter "FullyQualifiedName~Tests" \
            --results-directory ./tests/unit/results \
            --logger "trx"
      - publish-test-results:
          path: ./tests/unit/results

  build_image:
    docker:
      - image: circleci/buildpack-deps:latest
        user: root
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker image
          command: |
            docker build -t << pipeline.parameters.docker-repo >>:<< pipeline.parameters.docker-img-version >> \
              --build-arg AWSREGION=$AWS_REGION --build-arg AWS_DEVELOPMENTSTORAGE=false .
      - run:
          name: Save Docker image
          command: |
            docker save \
              -o << pipeline.parameters.docker-tar-filename >> \
              << pipeline.parameters.docker-repo >>:<< pipeline.parameters.docker-img-version >>
      - persist_to_workspace:
          root: .
          paths:
            - << pipeline.parameters.docker-tar-filename >>

  push-image:
    machine:
      image: ubuntu-2004:202201-02
    resource_class: medium
    parameters:
      ecr-account-url:
        type: string
      aws-account-id:
        type: string
      authenticate-aws:
        type: steps
    steps:
      - attach_workspace:
          at: ./
      - steps: << parameters.authenticate-aws >>
      - log-aws-identity
      - aws-cli/setup:
          aws-region: AWS_REGION
      - push-to-ecr:
          ecr-account-url: << parameters.ecr-account-url >>
          aws-account-id: << parameters.aws-account-id >>

  deploy:
    machine:
      image: ubuntu-2004:202201-02
    resource_class: medium
    parameters:
      ecr-account-url:
        type: string
      aws-account-id:
        type: string
      authenticate-aws:
        type: steps
      certificate-id:
        type: string
      hosted-zone-name:
        type: string
      network-stack-name:
        type: string
      service-stack-name:
        type: string
      cloudformation-role:
        type: string
    steps:
      - checkout
      - steps: << parameters.authenticate-aws >>
      - log-aws-identity
      - aws-cli/setup:
          aws-region: AWS_REGION
      - aws-cloudformation-deploy:
          ecr-account-url: << parameters.ecr-account-url >>
          certificate-id: << parameters.certificate-id >>
          hosted-zone-name: << parameters.hosted-zone-name >>
          network-stack-name: << parameters.network-stack-name >>
          service-stack-name: << parameters.service-stack-name >>
          cloudformation-role: << parameters.cloudformation-role >>